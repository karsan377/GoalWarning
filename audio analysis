from email.message import EmailMessage
import ssl
import smtplib
import pyaudio
import numpy as np
import time
import matplotlib.pyplot as plt
import certifi

# EMAIL INFORMATION
email_sender = 'input email here'
email_receiver = 'input email here'
email_password = 'zblepfdbiiqryxtm'
subject = 'Game Alert'
body = 'GANESH INCOMING GOAL!'
em = EmailMessage()
em['From'] = email_sender
em['To'] = email_receiver
em['Subject'] = subject
em.set_content(body)

context = ssl.create_default_context(cafile=certifi.where())








# Audio configuration
CHUNK = 1024  # Number of audio frames per buffer
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 44100  # Sample rate in Hz
INITIAL_THRESHOLD_DURATION = 60*50  # Time in seconds to calculate the mean volume
SUSTAIN_TIME = 5   # Time in seconds to sustain the threshold

# Initialize PyAudio
p = pyaudio.PyAudio()
stream = p.open(format=FORMAT, channels=CHANNELS, rate=RATE, input=True, frames_per_buffer=CHUNK)

# Variables to track sustained loudness and plotting data
above_threshold_start_time = None
sustained_event_detected = False
volume_data = []  # To store volume levels
timestamps = []  # To store corresponding timestamps
start_time = time.time()
initial_volumes = []  # To store volumes during the initial 5 minutes
threshold = None  # Dynamic threshold

print("Listening for sustained loud events...")

try:
    while True:
        # Read audio data
        data = np.frombuffer(stream.read(CHUNK), dtype=np.int16)
        amplitude = np.abs(data).mean()

        # Log data for plotting
        current_time = time.time() - start_time
        volume_data.append(amplitude)
        timestamps.append(current_time)

        # Calculate the threshold during the first 5 minutes
        if current_time <= INITIAL_THRESHOLD_DURATION:
            initial_volumes.append(amplitude)
            print(f"Calibrating threshold: {int(INITIAL_THRESHOLD_DURATION - current_time)} seconds left", end="\r")
        else:
            # Set the threshold once the initial period is over
            if threshold is None:
                threshold = np.percentile(initial_volumes, 60)
                print(f"\nThreshold set dynamically to 60th percentile volume: {threshold:.2f}")

            # Check if amplitude is above the threshold
            if amplitude > threshold:
                if above_threshold_start_time is None:
                    above_threshold_start_time = time.time()  # Start timing
                else:
                    elapsed_time = time.time() - above_threshold_start_time
                    if elapsed_time >= SUSTAIN_TIME and not sustained_event_detected:
                        print(f"Detected sustained loud event! Amplitude: {amplitude}")
                        sustained_event_detected = True  # Avoid repeated detection
                        with smtplib.SMTP_SSL('smtp.gmail.com', 465, context=context) as smtp:
                        # Log in to the email account using your email and app password
                            smtp.login(email_sender, email_password)
                        # Send the email    
                            smtp.sendmail(email_sender, email_receiver, em.as_string())
                            print("Email sent successfully!")
            else:
                # Reset tracking if volume drops below the threshold
                above_threshold_start_time = None
                sustained_event_detected = False

        print(f"Amplitude: {amplitude} | Threshold: {threshold if threshold else 'Calibrating'}", end="\r")

except KeyboardInterrupt:
    print("\nStopping...")
finally:
    # Stop and clean up the audio stream
    stream.stop_stream()
    stream.close()
    p.terminate()

    # Plot the volume data
    plt.figure(figsize=(10, 5))
    plt.plot(timestamps, volume_data, label="Volume")
    if threshold:
        plt.axhline(y=threshold, color='r', linestyle='--', label="Threshold")
    plt.xlabel("Time (s)")
    plt.ylabel("Amplitude")
    plt.title("Volume Over Time")
    plt.legend()
    plt.grid()
    plt.show()
